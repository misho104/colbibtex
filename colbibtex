#!/usr/bin/perl

use strict;
use warnings;
use File::Temp qw/ tempfile /;

our $TARGET = $ARGV[0] || usage();
$TARGET =~ s/\.aux$//i;
colbibtex();
exit 0;

sub error {
  my $message = shift || "Generic error.";
  print STDERR "$0 $message\n";
  exit 1;
}

sub usage {
  print STDERR "$0 AUXFILE[.aux]\n";
  exit 1;
}

sub exec_bibtex{ # argument must have suffix ".aux".
  my $filename = shift or die;
  my $cmd = "bibtex $filename";
  print STDERR "[EXECUTE] $cmd\n";
  print STDERR `$cmd 2>&1`;
  print STDERR "\n";
  (my $bbl = $filename) =~ s/\.aux$/.bbl/i;
  open(IN, $bbl) or error("$bbl not found.");
  my @result = <IN>;
  close(IN);
  return @result;
}

sub colbibtex{
  my ($bibinfo, $citations) = read_auxfile("$TARGET.aux");

  my $collapsed_entries = {};
  foreach(keys %$citations){
    if(@{$citations->{$_}} > 1){
      $collapsed_entries->{$_} = collapse_bbl_entries(1, generate_bbl($citations->{$_}->[0], $bibinfo, @{$citations->{$_}}));
    }
  }

  my @main_bbl = generate_bbl("", $bibinfo, keys %$citations);

  my ($key, $collapsed_mode) = ("", 0);
  my @entries;
  foreach(@main_bbl){ # find entries to be collapsed
    if($collapsed_mode and (/^\\bibitem{.*?}/ or /^\\end{thebibliography}/)){
      unless(@entries){
        error("No '\% ENTRY' tag found for $key");
      }
      $collapsed_entries->{$key} = collapse_bbl_entries(0, generate_bbl($key, $bibinfo, @entries));
      $collapsed_mode = 0;
      @entries = ();
    }

    if(/^\\bibitem{(.*?)}/){
      $key = $1;
    }elsif(/^COLLAPSED ENTRY/i){
      if($key eq ""){ error("Invalid bbl; keyword 'COLLAPSED ENTRY' appears in invalid position."); }
      $collapsed_mode = 1;
    }elsif(/^\s*%\s*ENTRY:\s*(.*)$/i){
      push(@entries, $1);
      unless($collapsed_mode){ error("Invalid bbl; keyword '\% ENTRY:' appears in invalid position."); }
    }
  }

  open(OUT, ">$TARGET.bbl");

  my $do_output = 1;
  foreach(@main_bbl){
    my $output_stack = "";
    if(/^\\bibitem{(.*?)}/){
      $key = $1;
      if(@{$citations->{$key}} > 1){ # collapsed entry in mcite style
        print OUT $collapsed_entries->{$key};
        print OUT "\n";
        $do_output = 0;
      }elsif(exists $collapsed_entries->{$key}){ # collapsed entry in bib
        print OUT $_;
        print OUT $collapsed_entries->{$key};
        print OUT "\n";
        $do_output = 0;
      }
    }elsif(/^\\end{thebibliography}/){
      $do_output = 1;
    }
    print OUT $_ if $do_output;
  }
  close(OUT);
}

sub read_auxfile{
  open(my $aux, "$TARGET.aux") or error "File $TARGET.aux not found.";
  # returns ($bibinfo, $citations).
  #   $bibinfo:   a list which contains \bibstyle and \bibdata lines.
  #   $citations: a hash, whose keys are HEAD refs, and its data is a list of HEAD + TAIL refs.
  my $bibinfo = [];
  my $citations = {};

  my $head = "";
  my $position = 0;
  foreach my $line(<$aux>){
    push(@$bibinfo, $line) if $line =~ /^\\bib(style|data)\{/;
    if($line =~ /^\\citation{(.*?)}/){
      my $key = $1;
      if($key =~ /^\*(.*)$/){
        $position++;
        $key = $1;
        if($head eq ""){ error("Missing head ref for [$key]."); }
        if($citations->{$head}->[-1] eq ""){
          # if the head is already finalized
          if($citations->{$head}->[$position] eq $key){
            # no problem with same order
          }else{
            error("Redefinition of [$head] with different tails [$key].");
          }
        }else{
          # in definition session for the head
          foreach(@{$citations->{$head}}){
            if($_ eq $key){
              error("Duplicated entry [$key] for [$head].");
            }
          }
          push(@{$citations->{$head}}, $key);
        }
      }else{
        # put a lid on the last "head" to check overwriting existing head.
        push(@{$citations->{$head}}, "") if $head ne "" and $citations->{$head}->[-1] ne "";
        $head = $key;
        $position = 0;
        $citations->{$head} = [$head] unless exists $citations->{$head};
      }
    }
  }
  foreach(keys %$citations){
    pop @{$citations->{$_}} if $citations->{$_}->[-1] eq "";
  }
  close($aux);
  return ($bibinfo, $citations);
}

sub generate_collapsed_entry{
  my ($bibinfo, @refs) = @_;
  return collapse_bbl_entries(generate_bbl($refs[0], $bibinfo, @refs));
}

sub collapse_bbl_entries{
  my $use_first_label = shift;
  my @entries = get_bbl_entries(@_); # chomp performed.
  for(my $entry = 0; $entry <= $#entries-1; $entry++){
    for(my $line = $#{$entries[$entry]}; $line >= 0; $line--){
      if($entries[$entry]->[$line] =~ /^([^%]*)\.(\s*(\%.*)?)$/){
        $entries[$entry]->[$line] = "$1;$2";
        last;
      }
    }
  }
  for(my $entry = ($use_first_label ? 1 : 0); $entry <= $#entries; $entry++){
    for(my $line = 0; $line <= $#{$entries[$entry]}; $line++){
      if($entries[$entry]->[$line] =~ /^(\\bibitem{.*?})(.*)$/){
        my ($item, $suffix) = ($1, $2);
        $entries[$entry]->[$line] =
          ($suffix =~ /^\s*$/) ? "\%$item" : "\%$item\n$suffix";
        last;
      }
    }
  }
  my @lines;
  foreach(@entries){
    foreach(@$_){
      push(@lines, /^\s*$/ ? "%\n" : "$_\n");
    }
  }
  return join("", @lines);
}

sub get_bbl_entries{
  my @entries;
  foreach(@_){
    chomp;
    last if /^\\end{thebibliography}/;
    if(/^\\bibitem\{/){
      push(@entries, [$_])
    }else{
      push(@{$entries[-1]}, $_) if @entries;
    }
  }
  return @entries;
}

sub generate_bbl {
  my ($title, $bibinfo, @refs) = @_;
  (my $filename = "${TARGET}_$title") =~ s/[^\w]//g;

  # prepare aux file
  open(my $fh, ">$filename.aux") or error "Cannot create a file $filename.aux.";
  print $fh @$bibinfo;
  foreach(@refs){
    print $fh "\\citation{$_}\n";
  }
  close($fh);
  return exec_bibtex("$filename.aux");
}

__END__
